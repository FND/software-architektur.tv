BEGIN:VCALENDAR
PRODID:-//Microsoft Corporation//Outlook 16.0 MIMEDIR//EN
VERSION:2.0
METHOD:PUBLISH
X-MS-OLK-FORCEINSPECTOROPEN:TRUE
BEGIN:VTIMEZONE
TZID:W. Europe Standard Time
BEGIN:STANDARD
DTSTART:16011028T030000
RRULE:FREQ=YEARLY;BYDAY=-1SU;BYMONTH=10
TZOFFSETFROM:+0200
TZOFFSETTO:+0100
END:STANDARD
BEGIN:DAYLIGHT
DTSTART:16010325T020000
RRULE:FREQ=YEARLY;BYDAY=-1SU;BYMONTH=3
TZOFFSETFROM:+0100
TZOFFSETTO:+0200
END:DAYLIGHT
END:VTIMEZONE
BEGIN:VEVENT
CLASS:PUBLIC
CREATED:20220310T075916Z
DESCRIPTION:Nachdem wir in der vorherigen Episode begonnen haben\, Qualitä
	tsszenarien zu definieren und den System-Kontext zu erstellen\, werden wir
	 in dieser Episode die Lösung in einzelne Komponenten strukturieren. Das 
	ergibt für die Implementierung eine Struktur vor\, die den Code aufteilt.
	\n\n\nVorherige Episode: https://software-architektur.tv/2022/02/25/folge1
	11.html\nStream https://www.youtube.com/watch?v=K512HtCbb2Q  https://www.t
	witch.tv/ebrwolff \n
DTEND;TZID="W. Europe Standard Time":20220311T130000
DTSTAMP:20210329T160737Z
DTSTART;TZID="W. Europe Standard Time":20220311T120000
LAST-MODIFIED:20220310T075916Z
LOCATION:Stream https://www.youtube.com/watch?v=K512HtCbb2Q  https://www.tw
	itch.tv/ebrwolff
PRIORITY:5
SEQUENCE:0
SUMMARY;LANGUAGE=de:Software Architektur im Stream: Wir bauen eine Sofware-
	Architektur - Struktur der Lösung
TRANSP:OPAQUE
UID:040000008200E00074C5B7101A82E0080000000030E85821ADCDD701000000000000000
	010000000ADB053CCF7A86A4394D0D7963E2F526E
X-MICROSOFT-CDO-BUSYSTATUS:BUSY
X-MICROSOFT-CDO-IMPORTANCE:1
X-MS-OLK-AUTOFILLLOCATION:FALSE
END:VEVENT
END:VCALENDAR
